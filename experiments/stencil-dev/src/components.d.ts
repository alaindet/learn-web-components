/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { MenuOption } from "./components/my-menu/my-menu.component";
export { MenuOption } from "./components/my-menu/my-menu.component";
export namespace Components {
    interface MyBadge {
        "type": 'success' | 'info' | 'error';
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface MyMenu {
        "options": MenuOption[];
    }
}
export interface MyMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMyMenuElement;
}
declare global {
    interface HTMLMyBadgeElement extends Components.MyBadge, HTMLStencilElement {
    }
    var HTMLMyBadgeElement: {
        prototype: HTMLMyBadgeElement;
        new (): HTMLMyBadgeElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLMyMenuElementEventMap {
        "pickedOption": MenuOption['value'];
    }
    interface HTMLMyMenuElement extends Components.MyMenu, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMyMenuElementEventMap>(type: K, listener: (this: HTMLMyMenuElement, ev: MyMenuCustomEvent<HTMLMyMenuElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMyMenuElementEventMap>(type: K, listener: (this: HTMLMyMenuElement, ev: MyMenuCustomEvent<HTMLMyMenuElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMyMenuElement: {
        prototype: HTMLMyMenuElement;
        new (): HTMLMyMenuElement;
    };
    interface HTMLElementTagNameMap {
        "my-badge": HTMLMyBadgeElement;
        "my-component": HTMLMyComponentElement;
        "my-menu": HTMLMyMenuElement;
    }
}
declare namespace LocalJSX {
    interface MyBadge {
        "type"?: 'success' | 'info' | 'error';
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface MyMenu {
        "onPickedOption"?: (event: MyMenuCustomEvent<MenuOption['value']>) => void;
        "options"?: MenuOption[];
    }
    interface IntrinsicElements {
        "my-badge": MyBadge;
        "my-component": MyComponent;
        "my-menu": MyMenu;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "my-badge": LocalJSX.MyBadge & JSXBase.HTMLAttributes<HTMLMyBadgeElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "my-menu": LocalJSX.MyMenu & JSXBase.HTMLAttributes<HTMLMyMenuElement>;
        }
    }
}
