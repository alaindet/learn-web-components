/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { MyMenuOption } from "./components/my-menu/types";
import { MenuOption } from "./components/old-my-menu/old-my-menu.component";
export { MyMenuOption } from "./components/my-menu/types";
export { MenuOption } from "./components/old-my-menu/old-my-menu.component";
export namespace Components {
    interface MyBadge {
        "type": 'success' | 'info' | 'error';
    }
    interface MyBadgeDemo {
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface MyMenu {
        "options": MyMenuOption[];
    }
    interface MyMenuDemo {
    }
    interface MyRadio {
        "checked": boolean;
        "setName": (name: string) => Promise<void>;
        "value": string;
    }
    interface MyRadioDemo {
    }
    interface MyRadioGroup {
        "checked": boolean;
        "name": string;
    }
    interface OldMyMenu {
        "closeDropdown": () => Promise<void>;
        "getDimensions": () => Promise<string>;
        "openDropdown": () => Promise<void>;
        "options": MenuOption[];
        "toggleDropdown": () => Promise<void>;
    }
}
export interface MyMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMyMenuElement;
}
export interface OldMyMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOldMyMenuElement;
}
declare global {
    interface HTMLMyBadgeElement extends Components.MyBadge, HTMLStencilElement {
    }
    var HTMLMyBadgeElement: {
        prototype: HTMLMyBadgeElement;
        new (): HTMLMyBadgeElement;
    };
    interface HTMLMyBadgeDemoElement extends Components.MyBadgeDemo, HTMLStencilElement {
    }
    var HTMLMyBadgeDemoElement: {
        prototype: HTMLMyBadgeDemoElement;
        new (): HTMLMyBadgeDemoElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLMyMenuElementEventMap {
        "selected": string;
    }
    interface HTMLMyMenuElement extends Components.MyMenu, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMyMenuElementEventMap>(type: K, listener: (this: HTMLMyMenuElement, ev: MyMenuCustomEvent<HTMLMyMenuElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMyMenuElementEventMap>(type: K, listener: (this: HTMLMyMenuElement, ev: MyMenuCustomEvent<HTMLMyMenuElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMyMenuElement: {
        prototype: HTMLMyMenuElement;
        new (): HTMLMyMenuElement;
    };
    interface HTMLMyMenuDemoElement extends Components.MyMenuDemo, HTMLStencilElement {
    }
    var HTMLMyMenuDemoElement: {
        prototype: HTMLMyMenuDemoElement;
        new (): HTMLMyMenuDemoElement;
    };
    interface HTMLMyRadioElement extends Components.MyRadio, HTMLStencilElement {
    }
    var HTMLMyRadioElement: {
        prototype: HTMLMyRadioElement;
        new (): HTMLMyRadioElement;
    };
    interface HTMLMyRadioDemoElement extends Components.MyRadioDemo, HTMLStencilElement {
    }
    var HTMLMyRadioDemoElement: {
        prototype: HTMLMyRadioDemoElement;
        new (): HTMLMyRadioDemoElement;
    };
    interface HTMLMyRadioGroupElement extends Components.MyRadioGroup, HTMLStencilElement {
    }
    var HTMLMyRadioGroupElement: {
        prototype: HTMLMyRadioGroupElement;
        new (): HTMLMyRadioGroupElement;
    };
    interface HTMLOldMyMenuElementEventMap {
        "pickedOption": MenuOption['value'];
    }
    interface HTMLOldMyMenuElement extends Components.OldMyMenu, HTMLStencilElement {
        addEventListener<K extends keyof HTMLOldMyMenuElementEventMap>(type: K, listener: (this: HTMLOldMyMenuElement, ev: OldMyMenuCustomEvent<HTMLOldMyMenuElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLOldMyMenuElementEventMap>(type: K, listener: (this: HTMLOldMyMenuElement, ev: OldMyMenuCustomEvent<HTMLOldMyMenuElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLOldMyMenuElement: {
        prototype: HTMLOldMyMenuElement;
        new (): HTMLOldMyMenuElement;
    };
    interface HTMLElementTagNameMap {
        "my-badge": HTMLMyBadgeElement;
        "my-badge-demo": HTMLMyBadgeDemoElement;
        "my-component": HTMLMyComponentElement;
        "my-menu": HTMLMyMenuElement;
        "my-menu-demo": HTMLMyMenuDemoElement;
        "my-radio": HTMLMyRadioElement;
        "my-radio-demo": HTMLMyRadioDemoElement;
        "my-radio-group": HTMLMyRadioGroupElement;
        "old-my-menu": HTMLOldMyMenuElement;
    }
}
declare namespace LocalJSX {
    interface MyBadge {
        "type"?: 'success' | 'info' | 'error';
    }
    interface MyBadgeDemo {
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface MyMenu {
        "onSelected"?: (event: MyMenuCustomEvent<string>) => void;
        "options": MyMenuOption[];
    }
    interface MyMenuDemo {
    }
    interface MyRadio {
        "checked"?: boolean;
        "value": string;
    }
    interface MyRadioDemo {
    }
    interface MyRadioGroup {
        "checked"?: boolean;
        "name": string;
    }
    interface OldMyMenu {
        "onPickedOption"?: (event: OldMyMenuCustomEvent<MenuOption['value']>) => void;
        "options"?: MenuOption[];
    }
    interface IntrinsicElements {
        "my-badge": MyBadge;
        "my-badge-demo": MyBadgeDemo;
        "my-component": MyComponent;
        "my-menu": MyMenu;
        "my-menu-demo": MyMenuDemo;
        "my-radio": MyRadio;
        "my-radio-demo": MyRadioDemo;
        "my-radio-group": MyRadioGroup;
        "old-my-menu": OldMyMenu;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "my-badge": LocalJSX.MyBadge & JSXBase.HTMLAttributes<HTMLMyBadgeElement>;
            "my-badge-demo": LocalJSX.MyBadgeDemo & JSXBase.HTMLAttributes<HTMLMyBadgeDemoElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "my-menu": LocalJSX.MyMenu & JSXBase.HTMLAttributes<HTMLMyMenuElement>;
            "my-menu-demo": LocalJSX.MyMenuDemo & JSXBase.HTMLAttributes<HTMLMyMenuDemoElement>;
            "my-radio": LocalJSX.MyRadio & JSXBase.HTMLAttributes<HTMLMyRadioElement>;
            "my-radio-demo": LocalJSX.MyRadioDemo & JSXBase.HTMLAttributes<HTMLMyRadioDemoElement>;
            "my-radio-group": LocalJSX.MyRadioGroup & JSXBase.HTMLAttributes<HTMLMyRadioGroupElement>;
            "old-my-menu": LocalJSX.OldMyMenu & JSXBase.HTMLAttributes<HTMLOldMyMenuElement>;
        }
    }
}
